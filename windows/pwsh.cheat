% OS CLI: Powershell

# Decode Base64
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("<Base64Text>"))

# Encode Base64
[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("<ClearText>"))

# Rename all JPEGs with MD5 hashsum
Get-ChildItem -Recurse -Include "*.jpg" | Get-FileHash -Algorithm MD5 | Rename-Item -NewName { $_.hash + ".jpg"} -Force

# Get random String
$rng = New-Object System.Random; $pw = ""
for($i=0;$i -lt <length>;$i++) { $pw = $pw +[char]$rng.next(33,126) }
Write-Host($pw)

# Last Boot Time
Write-Host "System boot:" (Get-CimInstance -ClassName win32_operatingsystem | Select-Object -ExpandProperty LastBootUpTime)

# Check Scheduled Tasks
Get-ScheduledTask | Get-ScheduledTaskInfo | FT

# System install date
Write-Output "System install:" (Get-CimInstance -Class Win32_OperatingSystem).InstallDate

# Last boot time
Write-Output "System boot:" (Get-CimInstance -ClassName win32_operatingsystem | Select-Object -ExpandProperty LastBootUpTime)

# Get WiFi password
$keyword = @{"de-DE" = 'Schlüsselinhalt'; "en-US" = 'Key Content'} #add keyword for your language if required
Invoke-Expression -Command '(netsh wlan show profiles) | Select-String "\:(.+)$" | %{$name=$_.Matches.Groups[1].Value.Trim(); $_} | %{(netsh wlan show profile name="$name" key=clear)} | Select-String ($keyword[(get-culture).Name]+"\W+\:(.+)$") | %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | %{[PSCustomObject]@{ WiFi=$name;PASSWORD=$pass }} | Format-Table -AutoSize'

# Add WebDAV to local path
[String]$url = "https://" + <WEBDAV URL>
[String]$WebDAVShare = '\\$url@SSL<folder-path>'
(Invoke-WebRequest $url -Method Options).Headers.DAV  
New-PSDrive -Name <drive> -PSProvider FileSystem -Root $WebDAVShare -Credential '<credentials user@domain.tdl>'

# Format new, raw disk
Get-Disk | Where-Object {$_.partitionstyle -eq 'raw' -and $_.OperationalStatus -like 'Online' } | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel "newDisk" -Confirm:$false

# Check if a specific port is open
netstat -ano | Select-String "<port>"

# View open connections for a given service
get-nettcpconnection | select local*,remote*,state,@{Name="Process";Expression={(Get-Process -Id $_.OwningProcess).ProcessName}} | Where-Object {$_.Process -eq "<service>"} | Format-Table

# Check for Windows Updates
(New-Object -ComObject Microsoft.Update.AutoUpdate).DetectNow()

# Export PowerShell command history to a file
Get-History | Export-CSV $env:USERPROFILE\Desktop\CommandHistory.CSV

# Export all available powershell commands
Get-Command | Export-CSV $env:USERPROFILE\Desktop\CommandsAvailable.CSV

# Last 10 security event log entries
Get-EventLog Security -Newest 10

# Search recursively for a certain string within files
dir –r | select string "searchforthis"

# Top5 processes using the most memory
ps | sort –property ws | select –last 5

# Get all self-signed certs
Get-ChildItem -path cert:\\LocalMachine\\My

# Find something in (large) files
Get-Content <file> -wait | where { $\_ -match "<searchterm>" }

# Report all of the USB devices installed
Get-WMIObject Win32_USBControllerDevice -computername localhost |fl Antecedent,Dependent

# NTFS folder permissions
Get-Acl "<full-path>"

# NTFS folder permissions for all files in path
Get-ChildItem "<full-path>" -recurse | Get-Acl

# Get SHA1 hash sum of all files of the current folder
ForEach ($Item in Get-ChildItem $PWD -Include *.*) {Write-Host((Get-FileHash $Item.Name -Algorithm "SHA1").hash) $Item.Name }

# Find largest files in a given Folder
Get-ChildItem . -r | sort Length -desc | Select-Object fullname, length -f 20 | Format-Table

# Users logged in
(Get-CimInstance Win32_LoggedOnUser) | Select-Object -Unique
